{"hash":"f3603e8775d8b33f5deebb513f4186036e88d0ee","data":{"tag":{"id":"SOLID","title":"SOLID","path":"/tag/SOLID/","belongsTo":{"totalCount":1,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"888e79f6459f76d95ede4741ee5f58ca","title":"Prawo Demeter - zasada ograniczenia interakcji","datetime":"2020-04-30 15:56:24","path":"/prawo-demeter-zasada-ograniczenia-interakcji/","content":"<p>Przy projektowaniu obiektowym możemy się zastanowić, w jaki sposób uprościć relacje między naszymi obiektami, tak aby zmiana w jednej klasie nie propagowała konieczności zmian w wielu innych.\nZ pomocą przychodzi nam <a href=\"https://pl.wikipedia.org/wiki/Prawo_Demeter\" title=\"**prawo Demeter,** \" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>prawo Demeter,</strong> </a>które w skrócie ogranicza nas do interakcji jedynie z najbliższymi sąsiednimi obiektami. Dzięki temu, nasz obiekt jest zależny tylko od swoich sąsiadów. Kiedy implementacja sąsiada naszego sąsiada się zmieni - nie interesuje nas to. Jest to tak zwany luźny związek (<em>ang. loose coupling</em>).\nNie łamiemy w ten sposób zasady enkapsulacji obiektu i nie tworzymy dużej ilości powodów, dla których mielibyśmy modyfikować naszą klasę. W ten sposób możemy sprawić, że nasz projekt jest zgodny z zasadami <a href=\"https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SOLID</a>.\nPoniżej, na przykładzie logiki aplikacji quizowej, możemy przeanalizować przypadek <strong>tight coupled</strong> (1) i<strong> loose coupled</strong> (2). </p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\">//// przykład tight coupling (1)</span>\n<span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">QuizWhichBreaksLawOfDemeter</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> questions</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> Question[]</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">isAnswerCorrect</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">question</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> Question</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">     </span><span style=\"color: #4C566A\">// poniżej łamiemy Prawo Demeter</span>\n<span style=\"color: #ECEFF4\">     </span><span style=\"color: #4C566A\">// wnikając w implementację answer</span>\n<span style=\"color: #D8DEE9FF\">      </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">question</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">getAnswer</span><span style=\"color: #D8DEE9FF\">()</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">getId</span><span style=\"color: #D8DEE9FF\">() </span><span style=\"color: #81A1C1\">==</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">      </span><span style=\"color: #D8DEE9\">question</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">getUserAnswer</span><span style=\"color: #D8DEE9FF\">()</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">getId</span><span style=\"color: #D8DEE9FF\">()</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">countCorrectAnswers</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">number</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">      </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">questions</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">filter</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">q</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">isAnswerCorrect</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">q</span><span style=\"color: #D8DEE9FF\">))</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">length</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\"> </span>\n\n<span style=\"color: #4C566A\">// anemiczna klasa question, nic prócz getterów i setterów</span>\n<span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Question</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> answer</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> QuizOption</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> userAnswer</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> QuizOption</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">getUserAnswer</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> QuizOption </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">userAnswer</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">getAnswer</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> QuizOption </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">answer</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\"> </span></code></pre>\n<p>W powyższym przykładzie z poziomu quizu dostajemy się do wnętrza answer, który nie jest naszym bezpośrednim sąsiadem (quiz &#x3C;-> question &#x3C;-> answer). Metoda <code>isAnswerCorrect()</code> wywołuje łańcuch <code>question.getUserAnswer().getId()</code>, dostając się głęboko do struktury, której szczegółów implementacyjnych nie powinniśmy znać. Łamiemy Prawo Demeter. </p>\n<p>Zastanówmy się, jak możemy rozwiązać ten problem. Musimy ograniczyć splątanie naszych klas i ich wspólną zależność od siebie.\nPoniżej przykład, który jest nieco lepszy. Metoda <code>isAnswerCorrect()</code> została przeniesiona z klasy Quiz, do klasy Question. Manipuluje ona już swoimi własnymi sąsiadami, wystawiając Quizowi tylko metodę do sprawdzenia ( <code>isAnswerCorrect()</code> ).</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\">// przykład loose coupling (2)</span>\n<span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">QuizLooseCoupled</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    questions</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> Question[]</span>\n<span style=\"color: #ECEFF4\">\t</span><span style=\"color: #4C566A\">// nie interesuje nas jak jest sprawdzana odpowiedź</span>\n<span style=\"color: #ECEFF4\">\t</span><span style=\"color: #4C566A\">// po prostu wywołujemy metodę naszego sąsiedniego obiektu</span>\n<span style=\"color: #D8DEE9FF\">     </span><span style=\"color: #88C0D0\">countCorrectAnswers</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">number</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">      </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">questions</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">filter</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">q</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">q</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">isAnswerCorrect</span><span style=\"color: #D8DEE9FF\">())</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">length</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Question</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// ...</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> answer</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> QuizOption</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">private</span><span style=\"color: #D8DEE9FF\"> userAnswer</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> QuizOption</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// tutaj przeniesiona jest odpowiedzialność funkcji</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">isAnswerCorrect</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">      </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">answer</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">getId</span><span style=\"color: #D8DEE9FF\">() </span><span style=\"color: #81A1C1\">===</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">userAnswer</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">getId</span><span style=\"color: #D8DEE9FF\">()</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\"> </span>\n<span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\"> </span></code></pre>\n<p>Podany przykład jest prosty. Popełnienie błędu z pierwszej sekcji nie jest fatalne w skutkach, refaktoryzacja zajmie pół minuty. W przypadku większych aplikacji z wieloma tight coupled obiektami może powstać problem, który poskutkuje efektem domina - naprawiając jeden obiekt, musimy naprawić 2,3,4 następnych…</p>\n<p>Na ile posiadamy czasu, warto zastanowić się nad rozluznieniem wiezi naszych obiektów póki nie ma dramatu - nie żyjemy w starożytnej Grecji, ale Prawo Demeter warto znać :) </p>\n<p>Całość kodu można znaleźć na moim <a href=\"https://github.com/julia-glaszka/law-of-demeter\" title=\"githubie\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">githubie</a>.</p>\n","excerpt":"Przy projektowaniu obiektowym możemy się zastanowić, w jaki sposób uprościć relacje między naszymi obiektami, tak aby zmiana w jednej klasie nie propagowała konieczności zmian w wielu innych. Z","description":"Krótka notatka o prawie demeter z przykładami","cover":"/images/posts/prawo-demeter/cover.jpg","timeToRead":2,"author":{"id":"Julia","title":"Julia","path":"/author/Julia/"}}}]}}},"context":{}}