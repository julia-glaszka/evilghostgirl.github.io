{"hash":"5fc522a57be761dc6f299e6499675b3c26e950ab","data":{"post":{"title":"Wykonywanie kopii obiektów w JavaScript","path":"/wykonywanie-kopii-obiektow-w-java-script/","slug":"wykonywanie-kopii-obiektow-w-js","datetime":"2020-03-01 14:43:24","content":"<p>Kopiowanie to mechanizm tworzenia duplikatów. W przypadku prymitywów (string, number, boolean itd) sprawa jest prosta, możemy spokojnie wykonywać wszystkie operacje bez obaw o nadpisywanie oryginału. Sprawa się komplikuje przy zastosowaniu przypisania obiektu za pomocą prostego = - wtedy tworzy się referencja do oryginału. Kopia jest zależna od oryginału, więc każda modyfikacja w obiekcie oddziałuje na resztę obiektów. Czasami taki efekt nie jest pożądany, niestety w js brakuje natywnych, prostych sposobów na klonowanie obiektów bez tworzenia referencji (wskaźnika na oryginał), trzeba w tym celu wykorzystywać różne hacki. W tym artykule omówię część z nich, mam nadzieję że komuś się przydadzą.</p>\n<h2 id=\"trochę-teorii\">Trochę teorii</h2>\n<p>Istnieją rodzaje kopiowania obiektów w js:</p>\n<ul>\n<li>Brak - referencja, wskazuje na adres obiektu macierzystego. Przy podmianie jakiejkolwiek wartości obiektu, zamieniają się one równocześnie w kopii i oryginale. Kopia jest silnie zależna od oryginału.</li>\n<li>Płytkie (shallow) - otrzymujemy prostą kopię, która posiada jednopoziomową kopię, głębsze zagnieżdzenia są referencją do oryginału i przy podmianie wartości zmieni się również w innych obiektach.</li>\n<li>Głębokie (deep) - kopie są identyczne, jednak niezależne od siebie. Obiekt jest autonomiczny, posiada wartości na własność, nic nie współdzieli - zmiana w oryginale nie zmieni kopii.</li>\n</ul>\n<h2 id=\"brak-kopii\">Brak kopii</h2>\n<p>Zacznijmy od tego, w jaki sposób nie skopiujemy obiektu, a który jednak początkowo wydaje się słusznym i prostym rozwiązaniem. Jak widać, przy podmianie wartości w klonie, wartość oryginału również się zmieniła, co nie jest oczekiwanym efektem.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\">// proste przypisanie  </span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">kolor</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">czerwony</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">smak</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">słodki</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">rozmiar</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">duży</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">wymiary</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">x</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">10</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">y</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">32</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">z</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">33</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">mały</span><span style=\"color: #ECEFF4\">'</span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// mały</span></code></pre>\n<h2 id=\"płytkie-kopie\">Płytkie kopie</h2>\n<p>Część funkcji dostarczonych natywnie przez JavaScript umożliwia płytkie skopiowanie obiektu. Dopóki zajmujemy się przestrzenią bez zagnieżdżeń, wszystko działa jak powinno. Problem pojawia się, gdy modyfikujemy zagnieżdżone obiekty - wtedy nadal możemy modyfikować oryginał, co nie jest pożądane (dzięki rekurencyjnemu użyciu płytkich kopii możemy jednak stworzyć głęboką kopię, czym zajmiemy się później). Poniżej natywny sposób na płytką kopię: </p>\n<h3 id=\"objectassign\">Object.assign()</h3>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #4C566A\">//Tworzy płytką kopię - klonuje właściwości najwyższego poziomu, pozostawiając referencję do zagnieżdzonych  </span>\n<span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Object</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">assign</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">{},</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">mały</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #4C566A\">// \"duży\"  </span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">wymiary</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">32</span><span style=\"color: #D8DEE9FF\">  </span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">wymiary</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x) </span><span style=\"color: #4C566A\">//32, wartość jest podmieniona przez modyfikacje na poziomce!</span></code></pre>\n<h3 id=\"spread-operator-es6\">Spread operator ES6</h3>\n<p>Standard ES6 przynosi nam proste ułatwienia, pozwalające na dokonywanie kopii. Jednym z nich jest spread operator (...), który płytko ignoruje wskaźnik do obiektu macierzystego. Dzięki temu otrzymujemy obiekty niezależne.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">kolor</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">czerwony</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">smak</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">słodki</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">rozmiar</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">duży</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">wymiary</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">x</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">10</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">y</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">32</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">z</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">33</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">...</span><span style=\"color: #D8DEE9\">truskawka</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">mały</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #4C566A\">// \"duży\", wszystko OK!  </span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">wymiary</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">32</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">wymiary</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x) </span><span style=\"color: #4C566A\">//32, znowu podmienione przez poziomke :(</span></code></pre>\n<h2 id=\"sposoby-na-głęboką-kopię\">Sposoby na głęboką kopię</h2>\n<h3 id=\"jsonparse-jsonstringify\">JSON.parse(), JSON.stringify()</h3>\n<p>Kiedy tworzymy klona, chcielibyśmy by był całkowicie niezależny referencyjnie od oryginału, a jednocześnie był identyczny jak on. Łatwo można to uzyskać za pomocą niezbyt eleganckiej sztuczki z JSONem. Metoda ta działa tylko z czystymi strukturami danych - obiekt w tym wypadku nie może zawierać funkcji. Osobiście nie stosowałabym tego sposobu - w przypadku gdy przy wstępnych założeniach obiekt jest zwykłą strukturą danych, a później nieświadomy inny programista dopisze do niego metody, pojawi się nieoczekiwany i problematyczny bug.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #81A1C1\">var</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">kolor</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">czerwony</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">smak</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">słodki</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">rozmiar</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">duży</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">wymiary</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">x</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">10</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">y</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">32</span><span style=\"color: #ECEFF4\">,</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #88C0D0\">z</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">33</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">JSON</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">parse</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">JSON</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">stringify</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">mały</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">rozmiar</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #4C566A\">// \"duży\", wszystko OK!  </span>\n<span style=\"color: #D8DEE9\">poziomka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">wymiary</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">32</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #8FBCBB\">console</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">log</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">truskawka</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">wymiary</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9FF\">x) </span><span style=\"color: #4C566A\">//10, wszystko OK!</span></code></pre>\n<h3 id=\"customowa-funkcja-do-głębokiego-kopiowania\">Customowa funkcja do głębokiego kopiowania</h3>\n<p>Posiadamy już narzędzia do tworzenia płytkich kopii, możemy więc je wykorzystać przy tworzeniu głębokich kopii, wystarczy tylko wykorzystać rekurencję i posklejać to w jedno. Algorytm sprawdza czy przekazana w argumencie wartość - jeśli jest prymitywem, po prostu zwraca go. W przypadku gdy argument jest obiektem, przechodzimy po każdym jego polu i sprawdzamy czy jest ono typem prymitywnym, jeśli nie - wywołujemy funkcję dla pola nie-prymitywnego . Wszystko się powtarza do momentu, gdy algorytm przejdzie po całym drzewie.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440\"><code><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">deepCopyFunc</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=&gt;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">parent</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">value</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">key</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #81A1C1\">typeof</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">!==</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">object</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">||</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">===</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">null</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #4C566A\">// zwracamy jeśli jest typem prymitywnym  </span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #D8DEE9\">parent</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Array</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">isArray</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #81A1C1\">?</span><span style=\"color: #D8DEE9FF\"> [] </span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{}</span>\n\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">//jeśli jest obiektem to iterujemy po każdym property  </span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">for</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">in</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #D8DEE9\">value</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">child</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #D8DEE9FF\">]</span>\n<span style=\"color: #ECEFF4\">        </span><span style=\"color: #4C566A\">//jeśli wartość dla key jest obiektem to wykonujemy rekurencyjną kopie  </span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">value</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">!==</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">null</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">&&</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">typeof</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">value</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">===</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">object</span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #D8DEE9\">parent</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">deepCopyFunc</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">value</span><span style=\"color: #D8DEE9FF\">)</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">else</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">            </span><span style=\"color: #D8DEE9\">parent</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #D8DEE9\">key</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">value</span>\n<span style=\"color: #D8DEE9FF\">        </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">parent</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">originalArray</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> [</span><span style=\"color: #B48EAD\">37</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">3700</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">hello</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">\"</span><span style=\"color: #A3BE8C\">world</span><span style=\"color: #ECEFF4\">\"</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\">]</span></code></pre>\n<p>Myślę, że artykuł okazał się pomocny, a moje objaśnienia niezbyt trudne. Jeśli zauważysz gdzieś błąd, proszę, napisz do mnie. Zależy mi, by mój blog był rzetelnym źródłem informacji, więc z chęcią przyjmuję krytykę.</p>\n","description":"Opisuję metody wykonywania klonów obiektów","timeToRead":4,"cover":"/images/posts/kopie/cover.jpg","author":{"id":"Julia","title":"Julia","path":"/author/Julia/"},"tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"programowanie","title":"programowanie","path":"/tag/programowanie/"}]}},"context":{}}